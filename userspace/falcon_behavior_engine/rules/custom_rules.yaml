---
- list: system_executables_files
  items: [/proc/filesystems, /proc/self/stat, /usr/lib/locale/locale-archive, /
  usr/bin/systemctl]
- list: system_executables_directories
  items: [/run/systemd/system, /etc/systemd/system-preset, /usr/lib/systemd/sys
tem-preset, /run/systemd/system-preset, /usr/local/lib/systemd/system-preset]

- rule: Boot or logon autostart execution
  desc: an attempt to embedd a script to execute at the time of boot or logon
  condition: write_etc_common
  # output: A script is embedded below /etc to start its execution on boot or logon in to the system 
  output: "{\"sig_id\":\"2172\",\"marks\":[%evt.num]}"
  priority: ERROR


#This Falco rule is designed to detect attempts to create user accounts or add users to a system.
#A process has been spawned
#The name of the process matches one of the user management binaries listed in the configuration (user_mgmt_binaries)
#The process is not being executed within a container
#The command line used to execute the process is not excluded by the configuration 
#https://attack.mitre.org/techniques/T1136/
#Mitre Persistance: Create account subscenario

- rule: Create account or add user
  desc: >
    activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
    Activity in containers is also excluded--some containers create custom users on top
    of a base linux distribution at startup.
    Some innocuous command lines that don't actually change anything are excluded.
  condition: >
    spawned_process and proc.name in (user_mgmt_binaries)
  # output: >
    # an user is added or a account is created to get persistance access of system
  output: "{\"sig_id\":\"2173\",\"marks\":[%evt.num]}"
  priority: NOTICE

#this Falco rule is designed to detect attempts to create or modify system processes on a Linux system,
#which can be a sign of a malicious actor attempting to maintain persistence on the system.
#https://attack.mitre.org/techniques/T1543/
#Mitre Persistance: Create or Modify system process
#Mitre Priviledge Escalarion: Create or modify system process
  
- rule: Create or modify system process
  desc: a system process may be created or a existing process may be modified to keep malicious process running continuously
  condition: write_etc_common
  # output: A malicious system process is created or a existing process is modified to act like a malicious one
  output: "{\"sig_id\":\"2174\",\"marks\":[%evt.num]}"
  priority: ERROR

#system, which can be a sign of an attacker attempting to steal credentials.
#The conditions for the rule to trigger are specified in the condition field, 
#which checks for any activity by programs that can manage users, passwords, or permissions. However, 
#the sudo and su programs are excluded from the rule, as they are legitimate tools that can be used for managing users and permissions.
#https://attack.mitre.org/techniques/T1555/
#Mitre Credential Access: Credential from password stores

- rule: Credentials from password file
  desc: >
    activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
    Activity in containers is also excluded--some containers create custom users on top
    of a base linux distribution at startup.
    Some innocuous command lines that don't actually change anything are excluded.
  condition: >
    spawned_process and proc.name in (user_mgmt_binaries)
  # output: >
    # An attempt is made to access password file present on system to get credential access
  output: "{\"sig_id\":\"2175\",\"marks\":[%evt.num]}"
  priority: NOTICE 

#This Falco rule detects attempts to modify the authentication process by reading sensitive files that 
#contain user/password/authentication information by non-trusted programs. The condition checks for any read 
#operation on sensitive files by a process that is not a known trusted program. 
#https://attack.mitre.org/techniques/T1556/
#Mitre Credential Access: Modify Authentication Process  subscenario

- rule: Modify authentication process
  desc: >
    an attempt to read any sensitive file (e.g. files containing user/password/authentication
    information). Exceptions are made for known trusted programs.
  condition: >
    sensitive_files and open_read
    and proc_name_exists
  # output: >
    # Sensitive file opened for reading by non-trusted program  to modify the authentication process
  output: "{\"sig_id\":\"2176\",\"marks\":[%evt.num]}"
  priority: WARNING

#This Falco rule detects an attempt to inject code into a process using PTRACE.
#The condition checks for a PTRACE event of type ptrace, with direction greater than, 
#and with the request argument set to one of the specified values (5, 6, 11, 20, 27). 
#Additionally, the condition checks if the process name exists and is not in the list of known ptrace processes. 
#https://attack.mitre.org/techniques/T1055/
#Mitre Priviledge Escalation: Process Injection

- rule: process injection
  desc: "This rule detects an attempt to inject code into a process using PTRACE."
  condition: evt.type=ptrace and evt.dir=> and evt.arg.request in (5, 6, 11, 20, 27) and proc_name_exists and not known_ptrace_procs
  # output: A process is injected in to a known process binary to execute
  output: "{\"sig_id\":\"2177\",\"marks\":[%evt.num]}"
  priority: WARNING
  
#This falco rule detects an attempt to read sensitive files, 
#such as files containing user/password/authentication information, by a non-trusted program to discover information about the password policy of a system. 
#The condition for triggering the rule is that a sensitive file is being read in an open state by a process that is not a known trusted program.
#https://attack.mitre.org/techniques/T1201/
#Mitre Discovery: password policy discovery subscenario
 
- rule: password policy discovery
  desc: >
    an attempt to read any sensitive file (e.g. files containing user/password/authentication
    information). Exceptions are made for known trusted programs.
  condition: >
    sensitive_files and open_read
    and proc_name_exists
  # output: >
    # Sensitive file opened for reading by non-trusted program  to get information about set password policy of a system
  output: "{\"sig_id\":\"2178\",\"marks\":[%evt.num]}"
  priority: WARNING
