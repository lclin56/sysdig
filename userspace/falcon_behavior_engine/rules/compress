-- Chisel description
description = [[
    Detects archive and compression activity using popular tools like tar, zip, gzip, and bzip2.
    The script monitors for instances where these commands are used to create or extract compressed archives.
    https://attack.mitre.org/techniques/T1560/
    Mitre collection: Archive collected data subscenario
]]

short_description = "Detects archive and compression activity"
category = "data"

args = {}

-- List of archive and compression tools
encryption_proc = {
    ["zip"] = true, 
    ["tar"] = true, 
    ["gzip"] = true, 
    ["bzip2"] = true
}

local fprocname, fcmdline, fevtdir, fpid, fevtnum

-- Callback function for the initialization phase
function on_init()
    -- Requesting fields necessary for monitoring process activities
    fprocname = chisel.request_field("proc.name")
    fcmdline = chisel.request_field("proc.cmdline")
    fevtdir = chisel.request_field("evt.dir")
    fpid = chisel.request_field("proc.pid")
    fevtnum = chisel.request_field("evt.num")  -- Event number field

    -- Setting filter for process start events
    chisel.set_filter("evt.type=execve")

    return true
end

-- Callback function for each event
function on_event()
    local proc_name = evt.field(fprocname)
    local cmdline = evt.field(fcmdline)
    local evtdir = evt.field(fevtdir)
    local pid = evt.field(fpid)
    local evtnum = evt.field(fevtnum)  -- Retrieving the event number

    -- Check if the event is related to specified archive and compression tools
    if encryption_proc[proc_name] then
        -- Additional checks for specific tools and their command-line arguments
        if proc_name == "tar" and (string.find(cmdline, "%-czf") or string.find(cmdline, "%-cpf")) then
            local formatter = string.format("{\"sig_id\":\"124\",\"marks\":[%d]}", evtnum)
            chisel.set_event_formatter(formatter)
            return true
        elseif (proc_name == "zip" or proc_name == "gzip" or proc_name == "bzip2") and evtdir == "<" then
            local formatter = string.format("{\"sig_id\":\"124\",\"marks\":[%d]}", evtnum)
            chisel.set_event_formatter(formatter)
            return true
        end
    end

    return false
end

-- Optional: Callback function at the end of capture
function on_capture_end()
    print("Capture ended. Monitoring for archive and compression activity completed.")
end
